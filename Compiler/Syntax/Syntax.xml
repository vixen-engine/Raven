<?xml version="1.0" encoding="utf-8"?>
<Tree Root="SyntaxNode">
    <PredefinedNode Name="SyntaxToken" Base="SyntaxNode"/>

    
    <!-- Names -->
    <AbstractNode Name="NameSyntax" Base="TypeSyntax">
        <TypeComment>
            <summary>
                Provides the base class from which the classes that represent name syntax nodes are derived.
                This is an abstract class.
            </summary>
        </TypeComment>
    </AbstractNode>
    <AbstractNode Name="SimpleNameSyntax" Base="NameSyntax">
        <Field Name="Identifier" Type="SyntaxToken">
            <PropertyComment>
                <summary>SyntaxToken representing the identifier of the simple name.</summary>
            </PropertyComment>
            <Kind Name="IdentifierToken"/>
        </Field>
        <TypeComment>
            <summary>
                Provides the base class from which the classes that represent simple name syntax nodes are derived.
                This is an abstract class.
            </summary>
        </TypeComment>
    </AbstractNode>
    <Node Name="IdentifierNameSyntax" Base="SimpleNameSyntax">
        <Kind Name="IdentifierName"/>
        <Field Name="Identifier" Type="SyntaxToken" Override="true">
            <Kind Name="IdentifierToken"/>
            <Kind Name="GlobalKeyword"/>
            <PropertyComment>
                <summary>
                    SyntaxToken representing the keyword for the kind of the identifier name.
                </summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for identifier name.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates an IdentifierNameSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="QualifiedNameSyntax" Base="NameSyntax">
        <Kind Name="QualifiedName"/>
        <Field Name="Left" Type="NameSyntax">
            <PropertyComment>
                <summary>
                    NameSyntax node representing the name on the left side of the dot token of the qualified
                    name.
                </summary>
            </PropertyComment>
        </Field>
        <Field Name="Right" Type="SimpleNameSyntax">
            <PropertyComment>
                <summary>
                    SimpleNameSyntax node representing the name on the right side of the dot token of the qualified
                    name.
                </summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for qualified name.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a QualifiedNameSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="GenericNameSyntax" Base="SimpleNameSyntax">
        <Kind Name="GenericName"/>
        <Field Name="Identifier" Type="SyntaxToken" Override="true">
            <Kind Name="IdentifierToken"/>
            <PropertyComment>
                <summary>SyntaxToken representing the name of the identifier of the generic name.</summary>
            </PropertyComment>
        </Field>
        <Field Name="TypeArgumentList" Type="TypeArgumentListSyntax">
            <PropertyComment>
                <summary>TypeArgumentListSyntax node representing the list of type arguments of the generic name.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for generic name.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a GenericNameSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="TypeArgumentListSyntax" Base="SyntaxNode">
        <Kind Name="TypeArgumentList"/>
        <Field Name="Arguments" Type="SyntaxList&lt;TypeSyntax&gt;">
            <PropertyComment>
                <summary>SyntaxList of TypeSyntax node representing the type arguments.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for type argument list.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a TypeArgumentListSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="AliasQualifiedNameSyntax" Base="NameSyntax">
        <Kind Name="AliasQualifiedName"/>
        <Field Name="Alias" Type="IdentifierNameSyntax">
            <PropertyComment>
                <summary>IdentifierNameSyntax node representing the name of the alias</summary>
            </PropertyComment>
        </Field>
        <Field Name="Name" Type="SimpleNameSyntax">
            <PropertyComment>
                <summary>SimpleNameSyntax node representing the name that is being alias qualified.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for alias qualified name.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates an AliasQualifiedNameSyntax node.</summary>
        </FactoryComment>
    </Node>
    

    <!-- Expressions -->
    <AbstractNode Name="ExpressionOrPatternSyntax" Base="SyntaxNode"/>
    <AbstractNode Name="ExpressionSyntax" Base="ExpressionOrPatternSyntax">
        <TypeComment>
            <summary>
                Provides the base class from which the classes that represent expression syntax nodes are derived.
                This is an abstract class.
            </summary>
        </TypeComment>
    </AbstractNode>
    <AbstractNode Name="PatternSyntax" Base="ExpressionOrPatternSyntax"/>
    <Node Name="DiscardPatternSyntax" Base="PatternSyntax">
        <Kind Name="DiscardPattern"/>
    </Node>
    <AbstractNode Name="BaseExpressionColonSyntax" Base="SyntaxNode">
        <Field Name="Expression" Type="ExpressionSyntax"/>
    </AbstractNode>
    <!-- TODO PARSE -->
    <Node Name="ExpressionColonSyntax" Base="BaseExpressionColonSyntax">
        <Kind Name="ExpressionColon"/>
        <Field Name="Expression" Type="ExpressionSyntax" Override="true"/>
    </Node>
    <Node Name="NameColonSyntax" Base="BaseExpressionColonSyntax">
        <Kind Name="NameColon"/>
        <Field Name="Name" Type="IdentifierNameSyntax">
            <Kind Name="IdentifierName"/>
            <PropertyComment>
                <summary>IdentifierNameSyntax representing the identifier name.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for name colon syntax.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a NameColonSyntax node.</summary>
        </FactoryComment>
    </Node>
    <AbstractNode Name="InstanceExpressionSyntax" Base="ExpressionSyntax">
        <TypeComment>
            <summary>
                Provides the base class from which the classes that represent instance expression syntax nodes are derived.
                This is an abstract class.
            </summary>
        </TypeComment>
    </AbstractNode>
    <Node Name="SelfExpressionSyntax" Base="InstanceExpressionSyntax">
        <Kind Name="SelfExpression"/>
        <TypeComment>
            <summary>Class which represents the syntax node for a "self" expression.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a SelfExpressionSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="BaseExpressionSyntax" Base="InstanceExpressionSyntax">
        <Kind Name="BaseExpression"/>
        <TypeComment>
            <summary>Class which represents the syntax node for a base expression.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a BaseExpressionSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="ArrowExpressionClauseSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>The syntax for the expression body of an expression-bodied member.</summary>
        </TypeComment>
        <Kind Name="ArrowExpressionClause" />
        <Field Name="Expression" Type="ExpressionSyntax" />
    </Node>


    <Node Name="WhenClauseSyntax" Base="SyntaxNode">
        <Kind Name="WhenClause" />
        <Field Name="Condition" Type="ExpressionSyntax"/>
    </Node>


    <!-- Type Names -->
    <AbstractNode Name="TypeSyntax" Base="ExpressionSyntax">
        <TypeComment>
            <summary>
                Provides the base class from which the classes that represent type syntax nodes are derived. This
                is an abstract class.
            </summary>
        </TypeComment>
    </AbstractNode>
    <Node Name="PredefinedTypeSyntax" Base="TypeSyntax">
        <Kind Name="PredefinedType"/>
        <Field Name="Keyword" Type="SyntaxToken">
            <Kind Name="BoolKeyword"/>
            <Kind Name="ByteKeyword"/>
            <Kind Name="SByteKeyword"/>
            <Kind Name="IntKeyword"/>
            <Kind Name="UIntKeyword"/>
            <Kind Name="ShortKeyword"/>
            <Kind Name="UShortKeyword"/>
            <Kind Name="LongKeyword"/>
            <Kind Name="ULongKeyword"/>
            <Kind Name="FloatKeyword"/>
            <Kind Name="DoubleKeyword"/>
            <Kind Name="StringKeyword"/>
            <Kind Name="CharKeyword"/>
            <Kind Name="ObjectKeyword"/>
            <PropertyComment>
                <summary>SyntaxToken which represents the keyword corresponding to the predefined type.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for predefined types.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a PredefinedTypeSyntax node.</summary>
        </FactoryComment>
    </Node>


    <!-- Declarations -->
    <Node Name="CompilationUnitSyntax" Base="SyntaxNode">
        <Kind Name="CompilationUnit"/>
        <Field Name="Package" Type="PackageDirectiveSyntax"/>
        <Field Name="Imports" Type="SyntaxList&lt;ImportDirectiveSyntax&gt;"/>
        <Field Name="Members" Type="SyntaxList&lt;MemberDeclarationSyntax&gt;"/>
    </Node>
    <Node Name="PackageDirectiveSyntax" Base="SyntaxNode">
        <Kind Name="PackageDirective"/>
        <Field Name="PackageName" Type="NameSyntax"/>
    </Node>
    <Node Name="ImportDirectiveSyntax" Base="SyntaxNode">
        <Kind Name="ImportDirective"/>
        <Field Name="GlobalKeyword" Type="SyntaxToken" Optional="true">
            <Kind Name="GlobalKeyword"/>
        </Field>
        <Field Name="StaticKeyword" Type="SyntaxToken" Optional="true">
            <Kind Name="StaticKeyword"/>
        </Field>
        <Field Name="Name" Type="NameSyntax"/>
    </Node>
    <AbstractNode Name="MemberDeclarationSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Member declaration syntax.</summary>
        </TypeComment>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;">
            <PropertyComment>
                <summary>Gets the attribute declaration list.</summary>
            </PropertyComment>
        </Field>
        <Field Name="Modifiers" Type="SyntaxList&lt;SyntaxToken&gt;">
            <PropertyComment>
                <summary>Gets the modifier list.</summary>
            </PropertyComment>
        </Field>
    </AbstractNode>
    <!-- TODO member declarations -->

    
    <!-- Attributes -->
    <Node Name="AttributeListSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Class representing one or more attributes applied to a language construct.</summary>
        </TypeComment>
        <Kind Name="AttributeList"/>
        <Field Name="Target" Type="AttributeTargetSpecifierSyntax" Optional="true">
            <PropertyComment>
                <summary>Gets the optional construct targeted by the attribute.</summary>
            </PropertyComment>
        </Field>
        <Field Name="Attributes" Type="SyntaxList&lt;AttributeSyntax&gt;" MinCount="1">
            <PropertyComment>
                <summary>Gets the attribute declaration list.</summary>
            </PropertyComment>
        </Field>
    </Node>
    <Node Name="AttributeTargetSpecifierSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Class representing what language construct an attribute targets.</summary>
        </TypeComment>
        <Kind Name="AttributeTargetSpecifier"/>
        <Field Name="Identifier" Type="SyntaxToken">
            <PropertyComment>
                <summary>Gets the identifier.</summary>
            </PropertyComment>
        </Field>
    </Node>
    <Node Name="AttributeSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Attribute syntax.</summary>
        </TypeComment>
        <Kind Name="Attribute"/>
        <Field Name="Name" Type="NameSyntax">
            <PropertyComment>
                <summary>Gets the name.</summary>
            </PropertyComment>
        </Field>
        <Field Name="ArgumentList" Type="AttributeArgumentListSyntax" Optional="true"/>
    </Node>
    <Node Name="AttributeArgumentListSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Attribute argument list syntax.</summary>
        </TypeComment>
        <Kind Name="AttributeArgumentList"/>
        <Field Name="Arguments" Type="SyntaxList&lt;AttributeArgumentSyntax&gt;">
            <PropertyComment>
                <summary>Gets the arguments syntax list.</summary>
            </PropertyComment>
        </Field>
    </Node>
    <Node Name="AttributeArgumentSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Attribute argument syntax.</summary>
        </TypeComment>
        <Kind Name="AttributeArgument"/>
        <Choice>
            <Field Name="NameEquals" Type="NameEqualsSyntax" Optional="true"/>
            <Field Name="NameColon" Type="NameColonSyntax" Optional="true"/>
        </Choice>
        <Field Name="Expression" Type="ExpressionSyntax">
            <PropertyComment>
                <summary>Gets the expression.</summary>
            </PropertyComment>
        </Field>
    </Node>


    <Node Name="NameEqualsSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Class representing an identifier name followed by an equals token.</summary>
        </TypeComment>
        <Kind Name="NameEquals"/>
        <Field Name="Name" Type="IdentifierNameSyntax">
            <PropertyComment>
                <summary>Gets the identifier name.</summary>
            </PropertyComment>
            <Kind Name="IdentifierName"/>
        </Field>
    </Node>

    
    <!-- Types -->
    <AbstractNode Name="BaseTypeSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Provides the base class from which the classes that represent base type syntax nodes are derived. This is an abstract class.</summary>
        </TypeComment>
        <Field Name="Type" Type="TypeSyntax">
        </Field>
    </AbstractNode>
    <Node Name="SimpleBaseTypeSyntax" Base="BaseTypeSyntax">
        <Kind Name="SimpleBaseType"/>
        <Field Name="Type" Type="TypeSyntax" Override="true">
        </Field>
    </Node>
    <Node Name="PrimaryConstructorBaseTypeSyntax" Base="BaseTypeSyntax">
        <Kind Name="PrimaryConstructorBaseType"/>
        <Field Name="Type" Type="TypeSyntax" Override="true"/>
        <Field Name="ArgumentList" Type="ArgumentListSyntax"/>
    </Node>

    
    
<!--    Variables??-->

    <Node Name="EqualsValueClauseSyntax" Base="SyntaxNode">
        <Kind Name="EqualsValueClause"/>
        <Field Name="Value" Type="ExpressionSyntax"/>
    </Node>

    <Node Name="ParameterSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Parameter syntax.</summary>
        </TypeComment>
        <Kind Name="Parameter"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;">
            <PropertyComment>
                <summary>Gets the attribute declaration list.</summary>
            </PropertyComment>
        </Field>
        <Field Name="Modifiers" Type="SyntaxList&lt;SyntaxToken&gt;">
            <PropertyComment>
                <summary>Gets the modifier list.</summary>
            </PropertyComment>
        </Field>
        <Field Name="Identifier" Type="SyntaxToken">
            <PropertyComment>
                <summary>Gets the identifier.</summary>
            </PropertyComment>
            <Kind Name="IdentifierToken"/>
        </Field>
        <Field Name="Type" Type="TypeSyntax" Optional="true"/>
        <Field Name="Default" Type="EqualsValueClauseSyntax" Optional="true"/>
    </Node>
    <AbstractNode Name="BaseParameterListSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Base type for parameter list syntax.</summary>
        </TypeComment>
        <Field Name="Parameters" Type="SyntaxList&lt;ParameterSyntax&gt;">
            <PropertyComment>
                <summary>Gets the parameter list.</summary>
            </PropertyComment>
        </Field>
    </AbstractNode>
    <Node Name="ParameterListSyntax" Base="BaseParameterListSyntax">
        <TypeComment>
            <summary>Parameter list syntax.</summary>
        </TypeComment>
        <Kind Name="ParameterList"/>
        <Field Name="Parameters" Type="SyntaxList&lt;ParameterSyntax&gt;" Override="true"/>
    </Node>
    <Node Name="BracketedParameterListSyntax" Base="BaseParameterListSyntax">
        <TypeComment>
            <summary>Parameter list syntax with surrounding brackets.</summary>
        </TypeComment>
        <Kind Name="BracketedParameterList"/>
        <Field Name="Parameters" Type="SyntaxList&lt;ParameterSyntax&gt;" Override="true" MinCount="1"/>
    </Node>



    <AbstractNode Name="BaseArgumentListSyntax" Base="SyntaxNode">
        <Field Name="Arguments" Type="SyntaxList&lt;ArgumentSyntax&gt;">
            <PropertyComment>
                <summary>SyntaxList of ArgumentSyntax nodes representing the list of arguments.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Provides the base class from which the classes that represent argument list syntax nodes are derived. This is an abstract class.</summary>
        </TypeComment>
    </AbstractNode>
    <Node Name="ArgumentListSyntax" Base="BaseArgumentListSyntax">
        <Kind Name="ArgumentList"/>
        <Field Name="Arguments" Type="SyntaxList&lt;ArgumentSyntax&gt;" Override="true">
            <PropertyComment>
                <summary>SyntaxList of ArgumentSyntax representing the list of arguments.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for the list of arguments.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates an ArgumentListSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="BracketedArgumentListSyntax" Base="BaseArgumentListSyntax">
        <Kind Name="BracketedArgumentList"/>
        <Field Name="Arguments" Type="SyntaxList&lt;ArgumentSyntax&gt;" Override="true" MinCount="1">
            <PropertyComment>
                <summary>SyntaxList of ArgumentSyntax representing the list of arguments.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for bracketed argument list.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a BracketedArgumentListSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="ArgumentSyntax" Base="SyntaxNode">
        <Kind Name="Argument"/>
        <Field Name="NameColon" Type="NameColonSyntax" Optional="true">
            <PropertyComment>
                <summary>NameColonSyntax node representing the optional name arguments.</summary>
            </PropertyComment>
        </Field>
        <Field Name="RefKindKeyword" Type="SyntaxToken" Optional="true">
            <Kind Name="RefKeyword"/>
            <Kind Name="OutKeyword"/>
            <Kind Name="InKeyword"/>
            <PropertyComment>
                <summary>SyntaxToken representing the optional ref or out keyword.</summary>
            </PropertyComment>
        </Field>
        <Field Name="Expression" Type="ExpressionSyntax">
            <PropertyComment>
                <summary>ExpressionSyntax node representing the argument.</summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Class which represents the syntax node for argument.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates an ArgumentSyntax node.</summary>
        </FactoryComment>
    </Node>
    
    
    <!-- TODO: Can block have attributes? it's not currently implemented in ANTLR -->
    <!-- Statements -->
    <AbstractNode Name="StatementSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Represents the base class for all statements' syntax classes.</summary>
        </TypeComment>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;"/>
    </AbstractNode>
    <Node Name="BlockSyntax" Base="StatementSyntax">
        <Kind Name="Block"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Statements" Type="SyntaxList&lt;StatementSyntax&gt;"/>
    </Node>
    <Node Name="BreakStatementSyntax" Base="StatementSyntax">
        <Kind Name="BreakStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
    </Node>
    <Node Name="ContinueStatementSyntax" Base="StatementSyntax">
        <Kind Name="ContinueStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
    </Node>
    <Node Name="RepeatStatementSyntax" Base="StatementSyntax">
        <Kind Name="RepeatStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Statement" Type="StatementSyntax"/>
        <Field Name="Condition" Type="ExpressionSyntax"/>
    </Node>
    <Node Name="EmptyStatementSyntax" Base="StatementSyntax">
        <Kind Name="EmptyStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
    </Node>
    <Node Name="ExpressionStatementSyntax" Base="StatementSyntax">
        <Kind Name="ExpressionStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Expression" Type="ExpressionSyntax"/>
    </Node>
    <Node Name="ForStatementSyntax" Base="StatementSyntax">
        <Kind Name="ForStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Identifier" Type="SyntaxToken">
            <PropertyComment>
                <summary>SyntaxToken representing the identifier of the variable.</summary>
            </PropertyComment>
            <Kind Name="IdentifierToken"/>
        </Field> 
        <Field Name="Expression" Type="ExpressionSyntax"/>
        <Field Name="Statement" Type="StatementSyntax"/>
    </Node>
    <Node Name="IfStatementSyntax" Base="StatementSyntax">
        <Kind Name="IfStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Condition" Type="ExpressionSyntax">
            <PropertyComment>
                <summary>
                    Gets an ExpressionSyntax that represents the condition of the if statement.
                </summary>
            </PropertyComment>
        </Field>
        <Field Name="Statement" Type="StatementSyntax">
            <PropertyComment>
                <summary>
                    Gets a StatementSyntax the represents the statement to be executed when the condition is true.
                </summary>
            </PropertyComment>
        </Field>
        <Field Name="Else" Type="ElseClauseSyntax" Optional="true">
            <PropertyComment>
                <summary>
                    Gets an ElseClauseSyntax that represents the statement to be executed when the condition is false if such statement exists.
                </summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>
                Represents an if statement syntax.
            </summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates an IfStatementSyntax node</summary>
        </FactoryComment>
    </Node>
    <Node Name="ElseClauseSyntax" Base="SyntaxNode">
        <Kind Name="ElseClause"/>
        <Field Name="Statement" Type="StatementSyntax"/>
        <TypeComment>
            <summary>Represents an else statement syntax.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a ElseClauseSyntax node</summary>
        </FactoryComment>
    </Node>
    <Node Name="ReturnStatementSyntax" Base="StatementSyntax">
        <Kind Name="ReturnStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Expression" Type="ExpressionSyntax" Optional="true"/>
    </Node>
    <!-- TODO -->
    <Node Name="LocalFunctionStatementSyntax" Base="StatementSyntax">
        <Kind Name="LocalFunctionStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Modifiers" Type="SyntaxList&lt;SyntaxToken&gt;"/>
        <Field Name="Identifier" Type="SyntaxToken">
            <PropertyComment>
                <summary>Gets the identifier.</summary>
            </PropertyComment>
            <Kind Name="IdentifierToken"/>
        </Field>
        <Field Name="TypeParameterList" Type="TypeParameterListSyntax" Optional="true"/>
        <Field Name="ParameterList" Type="ParameterListSyntax"/>
        <Field Name="ConstraintClauses" Type="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;"/>
        <Field Name="ReturnType" Type="TypeSyntax" Optional="true"/>
        <Choice>
            <Field Name="Body" Type="BlockSyntax"/>
            <Field Name="ExpressionBody" Type="ArrowExpressionClauseSyntax"/>
        </Choice>
    </Node>
    <!-- TODO -->
    <Node Name="LocalDeclarationStatementSyntax" Base="StatementSyntax">
        <Kind Name="LocalDeclarationStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="UsingKeyword" Type="SyntaxToken" Optional="true">
            <Kind Name="UsingKeyword"/>
        </Field>
        <Field Name="Modifiers" Type="SyntaxList&lt;SyntaxToken&gt;">
            <PropertyComment>
                <summary>Gets the modifier list.</summary>
            </PropertyComment>
        </Field>
        <Field Name="Declaration" Type="VariableDeclarationSyntax"/>
    </Node>
    <!-- TODO -->
    <Node Name="WhileStatementSyntax" Base="StatementSyntax">
        <Kind Name="WhileStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Condition" Type="ExpressionSyntax"/>
        <Field Name="Statement" Type="StatementSyntax"/>
    </Node>
    <!-- TODO -->
    <Node Name="UsingStatementSyntax" Base="StatementSyntax">
        <Kind Name="UsingStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Choice>
            <Field Name="Declaration" Type="VariableDeclarationSyntax"/>
            <Field Name="Expression" Type="ExpressionSyntax"/>
        </Choice>
        <Field Name="Statement" Type="StatementSyntax"/>
    </Node>
    <!-- TODO -->
    <Node Name="SwitchStatementSyntax" Base="StatementSyntax">
        <Kind Name="SwitchStatement"/>
        <Field Name="AttributeLists" Type="SyntaxList&lt;AttributeListSyntax&gt;" Override="true"/>
        <Field Name="Expression" Type="ExpressionSyntax">
            <PropertyComment>
                <summary>
                    Gets an ExpressionSyntax representing the expression of the switch statement.
                </summary>
            </PropertyComment>
        </Field>
        <Field Name="Sections" Type="SyntaxList&lt;SwitchSectionSyntax&gt;">
            <PropertyComment>
                <summary>
                    Gets a SyntaxList of SwitchSectionSyntax's that represents the switch sections of the switch statement.
                </summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Represents a switch statement syntax.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a SwitchStatementSyntax node.</summary>
        </FactoryComment>
    </Node>
    <!-- TODO -->
    <Node Name="SwitchSectionSyntax" Base="SyntaxNode">
        <Kind Name="SwitchSection"/>
        <Field Name="Labels" Type="SyntaxList&lt;SwitchLabelSyntax&gt;" MinCount="1">
            <PropertyComment>
                <summary>
                    Gets a SyntaxList of SwitchLabelSyntax's the represents the possible labels that control can transfer to within the section.
                </summary>
            </PropertyComment>
        </Field>
        <Field Name="Statements" Type="SyntaxList&lt;StatementSyntax&gt;" MinCount="1">
            <PropertyComment>
                <summary>
                    Gets a SyntaxList of StatementSyntax's the represents the statements to be executed when control transfer to a label the belongs to the section.
                </summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Represents a switch section syntax of a switch statement.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a SwitchSectionSyntax node.</summary>
        </FactoryComment>
    </Node>
    <AbstractNode Name="SwitchLabelSyntax" Base="SyntaxNode">
        <TypeComment>
            <summary>Represents a switch label within a switch statement.</summary>
        </TypeComment>
    </AbstractNode>
    <Node Name="CasePatternSwitchLabelSyntax" Base="SwitchLabelSyntax">
        <Kind Name="CasePatternSwitchLabel"/>
        <Field Name="Pattern" Type="PatternSyntax">
            <PropertyComment>
                <summary>
                    Gets a PatternSyntax that represents the pattern that gets matched for the case label.
                </summary>
            </PropertyComment>
        </Field>
        <Field Name="WhenClause" Type="WhenClauseSyntax" Optional="true"/>
        <TypeComment>
            <summary>Represents a case label within a switch statement.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a CaseMatchLabelSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="CaseSwitchLabelSyntax" Base="SwitchLabelSyntax">
        <Kind Name="CaseSwitchLabel"/>
        <Field Name="Value" Type="ExpressionSyntax">
            <PropertyComment>
                <summary>
                    Gets an ExpressionSyntax that represents the constant expression that gets matched for the case label.
                </summary>
            </PropertyComment>
        </Field>
        <TypeComment>
            <summary>Represents a case label within a switch statement.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a CaseSwitchLabelSyntax node.</summary>
        </FactoryComment>
    </Node>
    <Node Name="DefaultSwitchLabelSyntax" Base="SwitchLabelSyntax">
        <Kind Name="DefaultSwitchLabel"/>
        <TypeComment>
            <summary>Represents a default label within a switch statement.</summary>
        </TypeComment>
        <FactoryComment>
            <summary>Creates a DefaultSwitchLabelSyntax node.</summary>
        </FactoryComment>
    </Node>






    <Node Name="VariableDeclarationSyntax" Base="SyntaxNode">
        <Kind Name="VariableDeclaration"/>
        <Choice>
            <Field Name="VarKeyword" Type="SyntaxToken" Optional="true">
                <Kind Name="VarKeyword"/>
            </Field>
            <Field Name="ValKeyword" Type="SyntaxToken" Optional="true">
                <Kind Name="ValKeyword"/>
            </Field>
        </Choice>
        <Field Name="Identifier" Type="SyntaxToken">
            <PropertyComment>
                <summary>Gets the identifier.</summary>
            </PropertyComment>
            <Kind Name="IdentifierToken"/>
        </Field>
        <Field Name="Type" Type="TypeSyntax"/>
        <Field Name="Initializer" Type="EqualsValueClauseSyntax" Optional="true"/>
    </Node>
</Tree>